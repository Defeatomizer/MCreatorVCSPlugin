import groovy.json.JsonSlurper

plugins {
    id "java"
    id "idea"
}

repositories {
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" }
    flatDir { dirs mcreator_path + "/lib" }
}

group = 'net.mcreator.vcs'
version = new JsonSlurper().parse(file('src/main/resources/plugin.json'))['info']['version']

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

idea {
    module {
        inheritOutputDirs = true

        // define exclude dirs
        excludeDirs += file(".github")
        excludeDirs += file(".gradle")
        excludeDirs += file(".idea")
        excludeDirs += file("build")
        excludeDirs += file("gradle")
        excludeDirs += file("jdk")
        excludeDirs += file("license")
        excludeDirs += file("logs")
    }
}

configurations {
    implementation.extendsFrom export
}

dependencies {
    implementation project(':MCreator')
    project(':MCreator').afterEvaluate(() -> project(':MCreator').configurations.implementation.dependencies.each {
        //noinspection ForeignDelegate
        implementation it
    })
    export 'org.openl.jgit:org.eclipse.jgit:6.9.0.202403050737-openl'
}

tasks.jar {
    archiveFileName.set('mcreator-vcs-' + project.version + '.zip')
    from {
        configurations.export.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.register("extractPlugin", Copy.class) {
    doFirst {
        delete 'build/export/'
        mkdir 'build/export/'
    }

    dependsOn jar

    into 'build/export'
    into('') {
        from zipTree(file('build/libs/mcreator-vcs-' + project.version + '.zip'))
        from 'LICENSE.txt'
    }
    into('license') { from 'license' }
}

tasks.register('exportPlugin', Zip) {
    dependsOn extractPlugin

    delete 'build/libs/'

    from 'build/export/'
    into ''
    destinationDirectory = file('build/libs/')
    archiveFileName = 'mcreator-vcs-' + project.version + '.zip'

    doLast {
        delete 'build/export/'
    }
}

tasks.register('runMCreatorWithPlugin', JavaExec) {
    dependsOn jar

    environment("MCREATOR_PLUGINS_FOLDER", file("./build/libs"))
    environment("MCREATOR_PLUGINS_DEV", "")

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath = project(':MCreator').sourceSets.main.runtimeClasspath + sourceSets.main.runtimeClasspath
    mainClass.set('net.mcreator.Launcher')

    workingDir = mcreator_path
}
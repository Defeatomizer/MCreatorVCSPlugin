import groovy.json.JsonSlurper

plugins {
    id "java"
    id "idea"
}

repositories {
    mavenCentral()
    maven { url "https://repo.gradle.org/gradle/libs-releases" }
    flatDir { dirs mcreator_path + "/lib" }
}

group = 'net.mcreator.vcs'
version = new JsonSlurper().parse(file('src/main/resources/plugin.json'))['info']['version']

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

idea {
    module {
        inheritOutputDirs = true

        // define exclude dirs
        excludeDirs += file(".github")
        excludeDirs += file(".gradle")
        excludeDirs += file(".idea")
        excludeDirs += file("build")
        excludeDirs += file("gradle")
        excludeDirs += file("jdk")
        excludeDirs += file("license")
        excludeDirs += file("logs")
    }
}

configurations {
    implementation.extendsFrom export
}

dependencies {
    implementation project(':MCreator')
    project(':MCreator').afterEvaluate(() -> project(':MCreator').configurations.implementation.dependencies.each {
        //noinspection ForeignDelegate
        implementation it
    })
    export 'org.openl.jgit:org.eclipse.jgit:6.9.0.202403050737-openl'
}

tasks.jar {
    archiveFileName.set('mcreator-vcs-' + project.version + '.zip')

    delete 'build/libs/'

    from 'LICENSE.txt'
    from('license') { into 'license' }

    configurations.export.each {
        from((it.isDirectory() ? fileTree(it) : zipTree(it)).matching {
            exclude 'META-INF/**', 'OSGI-INF/**', 'about.html'
        } + (it.isDirectory() ? fileTree(it) : zipTree(it)).matching {
            include 'META-INF/services/**'
        })
    }
}

tasks.register('runMCreatorWithPlugin', JavaExec) {
    dependsOn jar

    environment("MCREATOR_PLUGINS_FOLDER", file("./build/libs"))
    environment("MCREATOR_PLUGINS_DEV", "")

    jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'

    classpath = project(':MCreator').sourceSets.main.runtimeClasspath + sourceSets.main.runtimeClasspath
    mainClass.set('net.mcreator.Launcher')

    workingDir = mcreator_path
}